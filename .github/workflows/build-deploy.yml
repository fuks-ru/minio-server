name: Build and deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PERSONAL_NPM_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PERSONAL_TOKEN }}
          fetch-depth: 0

      - name: Install modules
        run: yarn install

      - name: Eslint
        run: yarn lint

      - name: Build entries
        run: yarn build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Node build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./.docker/node/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/minio:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Nginx build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./.docker/nginx/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/minio-nginx:latest

  pull-containers:
    name: Pull containers

    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Remove docker images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_NODE_USERNAME }}
          key: ${{ secrets.SSH_NODE_PRIVATE_KEY }}
          script: |
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/minio || true
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/minio-nginx || true

      - name: Pull docker containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_NODE_USERNAME }}
          key: ${{ secrets.SSH_NODE_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/minio
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/minio-nginx

  deploy-minio:
    name: Deploy minio
    needs: [build, pull-containers]
    runs-on: ubuntu-latest

    steps:
      - name: Stop minio containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_NODE_USERNAME }}
          key: ${{ secrets.SSH_NODE_PRIVATE_KEY }}
          script: |
            docker container stop minio || true
            docker rm minio || true

      - name: Run minio
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_ROOT_USERNAME }}
          key: ${{ secrets.SSH_ROOT_PRIVATE_KEY }}
          script: |
            docker run --name minio \
            --rm -d \
            -e "MINIO_ROOT_USER=${{ secrets.MINIO_USER }}" \
            -e "MINIO_ROOT_PASSWORD=${{ secrets.MINIO_PASSWORD }}" \
            -v "/server/minio/data":/data \
            --network="fuks-ru" \
            minio/minio server /data --console-address ":9001"

  deploy-fuks:
    name: Deploy fuks
    needs: [build, pull-containers, deploy-minio]
    uses: ./.github/workflows/deploy.yml
    with:
      domain-name: fuks
    secrets: inherit

  deploy-esenin:
    name: Deploy esenin
    needs: [build, pull-containers, deploy-minio]
    uses: ./.github/workflows/deploy.yml
    with:
      domain-name: esenin-family
    secrets: inherit


  notification:
      name: Notification

      needs: [build, pull-containers, deploy-minio, deploy-fuks, deploy-esenin]

      runs-on: ubuntu-latest

      if: always()

      steps:
        - name: Send telegram message
          uses: appleboy/telegram-action@master
          env:
            COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{github.sha}}
            ACTION_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          with:
            to: ${{ secrets.TELEGRAM_TO }}
            token: ${{ secrets.TELEGRAM_TOKEN }}
            format: markdown
            disable_web_page_preview: true
            message: |
              *minio-server*
              
              [build and deploy](${{ env.ACTION_URL }}) by *${{ github.actor }}*
              
              steps:
              build *${{ needs.build.result == 'success' && '✅' || '⛔️' }}*
              pull-containers *${{ needs.pull-containers.result == 'success' && '✅' || '⛔️' }}*
              deploy-minio *${{ needs.deploy-minio.result == 'success' && '✅' || '⛔️' }}*
              deploy-fuks *${{ needs.deploy-fuks.result == 'success' && '✅' || '⛔️' }}*
              deploy-esenin *${{ needs.deploy-esenin.result == 'success' && '✅' || '⛔️' }}*
              
              [commit](${{ env.COMMIT_URL }})
